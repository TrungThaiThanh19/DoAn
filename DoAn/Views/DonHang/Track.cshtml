@model DoAn.Models.HoaDon
@{
    ViewData["Title"] = "Theo dõi đơn hàng " + Model.Ma_HoaDon;

    // Các bước trạng thái
    var steps = new[] { "Chờ xác nhận", "Đã xác nhận", "Đang vận chuyển", "Đã thanh toán", "Thành công" };
    var active = Math.Clamp(Model.TrangThai, 0, steps.Length - 1);

    // Đã từng gửi yêu cầu hoàn hàng chưa? (6)
    var hasReturnRequest = Model.TrangThaiDonHangs?.Any(x => x.TrangThai == 6) == true;

    string Currency(decimal v) => string.Format("{0:N0} đ", v);
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .order-head {
        background: linear-gradient(180deg,#eef2ff,#f8fafc);
        border: 1px solid #e5e7eb;
        border-radius: 18px
    }

    .stepper {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 18px
    }

    .step {
        text-align: center;
        flex: 1;
        position: relative;
        color: #6b7280
    }

        .step:not(:last-child)::after {
            content: "";
            position: absolute;
            top: 22px;
            left: 50%;
            right: -50%;
            height: 4px;
            background: #e5e7eb;
            z-index: 0
        }

    .dot {
        width: 40px;
        height: 40px;
        border-radius: 999px;
        background: #d1d5db;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 8px;
        font-weight: 800;
        position: relative;
        z-index: 1
    }

    .step.done .dot {
        background: #22c55e
    }

    .step.active .dot {
        background: #0d6efd
    }

    .step.done, .step.active {
        color: #111827;
        font-weight: 700
    }

    .badge-soft {
        background: #eff6ff;
        color: #0d6efd;
        font-weight: 700;
        border-radius: 999px;
        padding: 6px 12px
    }

    .card-soft {
        border: 1px solid #e5e7eb;
        border-radius: 16px
    }

    .table thead th {
        background: #f1f5f9;
        color: #0f172a;
        font-weight: 800
    }
</style>

<h2 class="mb-2 text-primary fw-bold">
    <i class="fa fa-location-dot me-2"></i>Theo dõi đơn hàng: @Model.Ma_HoaDon
</h2>
<div class="text-muted mb-3">
    Trạng thái hiện tại:
    <span class="badge-soft"><i class="fa-solid fa-circle me-1"></i>@steps[active]</span>
    <span class="ms-3">Cập nhật: <span id="updated">@((Model.NgayCapNhat ?? Model.NgayTao).ToString("dd/MM/yyyy HH:mm"))</span></span>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success"><i class="fa fa-check-circle me-1"></i>@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger"><i class="fa fa-triangle-exclamation me-1"></i>@TempData["Error"]</div>
}

@* Nếu đã gửi yêu cầu hoàn hàng: báo nhẹ *@
@if (hasReturnRequest)
{
    <div class="alert alert-warning d-flex align-items-center">
        <i class="fa fa-rotate-left me-2"></i>
        <div>
            <strong>Đã gửi yêu cầu hoàn hàng.</strong>
            <div class="text-muted">Shop sẽ liên hệ và sắp xếp đơn vị vận chuyển đến lấy.</div>
        </div>
    </div>
}

@* Nếu đã hủy: hiện lý do *@
@if (Model.TrangThai == 5 && Model.TrangThaiDonHangs != null)
{
    var cancelLog = Model.TrangThaiDonHangs
        .Where(x => x.TrangThai == 5)
        .OrderByDescending(x => x.NgayChuyen)
        .FirstOrDefault();

    if (cancelLog != null)
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="fa fa-circle-xmark me-2"></i>
            <div>
                <div>
                    <strong>Đơn hàng đã bị hủy.</strong>
                    <span class="text-muted">Thời gian:</span> @cancelLog.NgayChuyen.ToString("dd/MM/yyyy HH:mm")
                </div>
                @if (!string.IsNullOrWhiteSpace(cancelLog.NoiDungDoi))
                {
                    <div><span class="text-muted">Lý do:</span> @cancelLog.NoiDungDoi</div>
                }
                @if (!string.IsNullOrWhiteSpace(cancelLog.NhanVienDoi))
                {
                    <div><span class="text-muted">Người thực hiện:</span> @cancelLog.NhanVienDoi</div>
                }
            </div>
        </div>
    }
}

<!-- Stepper -->
<div class="order-head mb-4">
    <div class="stepper">
        @for (int i = 0; i < steps.Length; i++)
        {
            var cls = i < active ? "step done" : i == active ? "step active" : "step";
            <div class="@cls">
                <div class="dot">@((i + 1))</div>
                <div>@steps[i]</div>
            </div>
        }
    </div>
</div>

<!-- Thông tin & chi tiết -->
<div class="card card-soft shadow-sm border-0">
    <div class="card-body">
        <h5 class="fw-bold mb-3"><i class="fa-solid fa-box-open me-2"></i>Chi tiết sản phẩm</h5>
        <div class="table-responsive">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th style="width:56px">#</th>
                        <th>Sản phẩm</th>
                        <th class="text-center" style="width:120px">SL</th>
                        <th class="text-end" style="width:160px">Đơn giá</th>
                        <th class="text-end" style="width:180px">Thành tiền</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var idx = 1; decimal sum = 0;
                        if (Model.HoaDonChiTiets != null)
                        {
                            foreach (var it in Model.HoaDonChiTiets)
                            {
                                var ten = it.SanPhamChiTiet?.SanPham?.Ten_SanPham ?? "Sản phẩm";
                                var line = it.SoLuong * it.DonGia; sum += line;
                                <tr>
                                    <td>@idx</td>
                                    <td class="fw-semibold">@ten</td>
                                    <td class="text-center">@it.SoLuong</td>
                                    <td class="text-end">@Currency(it.DonGia)</td>
                                    <td class="text-end">@Currency(line)</td>
                                </tr>
                                idx++;
                            }
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4" class="text-end text-muted">Tạm tính</td>
                        <td class="text-end">@Currency(Model.HoaDonChiTiets?.Sum(x => x.SoLuong * x.DonGia) ?? 0m)</td>
                    </tr>
                    <tr>
                        <td colspan="4" class="text-end text-muted">Phí vận chuyển</td>
                        <td class="text-end">@Currency(Model.PhuThu ?? 0m)</td>
                    </tr>
                    <tr>
                        <td colspan="4" class="text-end fw-bold">Tổng thanh toán</td>
                        <td class="text-end fw-bold text-danger">@Currency(Model.TongTienSauGiam)</td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="d-flex flex-wrap gap-2 mt-2">
            <a class="btn btn-outline-secondary" asp-action="Index">
                <i class="fa-solid fa-arrow-left-long me-1"></i>Quay lại danh sách
            </a>

            @* Cho phép hủy nếu trạng thái còn sớm (0/1) *@
            @if (Model.TrangThai <= 1)
            {
                <form asp-action="Huy" asp-controller="DonHang" method="post" class="d-flex align-items-center gap-2"
                      onsubmit="return confirm('Bạn chắc chắn muốn hủy đơn @Model.Ma_HoaDon ?');">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.ID_HoaDon" />
                    <input type="text" name="lyDo" class="form-control" placeholder="Lý do hủy (tuỳ chọn)" style="max-width:360px" />
                    <button class="btn btn-danger">
                        <i class="fa-solid fa-ban me-1"></i>Hủy đơn
                    </button>
                </form>
            }

            @* ====== NÚT HOÀN HÀNG: chỉ hiện khi ĐÃ THANH TOÁN (3) và chưa gửi yêu cầu trước đó ====== *@
            @if (Model.TrangThai == 3 && !hasReturnRequest)
            {
                <form asp-action="HoanHang" asp-controller="DonHang" method="post" class="d-inline"
                      onsubmit="return confirm('Xác nhận gửi yêu cầu hoàn hàng cho đơn @Model.Ma_HoaDon ?');">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.ID_HoaDon" />
                    <button class="btn btn-warning">
                        <i class="fa-solid fa-rotate-left me-1"></i> Hoàn hàng
                    </button>
                </form>
            }
            @* ====== HẾT NÚT HOÀN HÀNG ====== *@
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const steps = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(steps));
        const id = '@Model.ID_HoaDon';

        function applyStep(status){
            const active = Math.max(0, Math.min(steps.length-1, status));
            for(let i=0;i<steps.length;i++){
                const container = document.querySelectorAll('.step')[i];
                if(!container) continue;
                container.className = (i<active) ? 'step done' : (i===active ? 'step active' : 'step');
            }
            const badge = document.querySelector('.badge-soft');
            if (badge) badge.innerHTML = '<i class="fa-solid fa-circle me-1"></i>' + steps[active];
        }

        async function poll(){
            try{
                const r = await fetch(`/HoaDon/Status?id=${encodeURIComponent(id)}`, { credentials:'same-origin' });
                if(!r.ok) return;
                const d = await r.json();
                if(d && d.ok){
                    applyStep(d.status);
                    const up = document.getElementById('updated');
                    if (up) up.textContent = (d.updatedAt || '').replace('T',' ').substring(0,16);
                }
            }catch(_){}
        }
        setInterval(poll, 10000);
        document.addEventListener('visibilitychange', ()=>{ if(!document.hidden) poll(); });
        poll();
    </script>
}
